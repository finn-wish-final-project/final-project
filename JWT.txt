https://hwan001.tistory.com/277

JWT (Json Web Token): 웹 표준으로 두 개체 사이에 JSON을 사용하여 정보를 안전성 있게 전달해줌
웹에서 로그인 하거나 인증을 받게되면 JWT는 토큰 내부의 Signature에 해당 정보를 기록

JWT의 구조 - Header, Payload, Signature 
Header: 토큰의 typ(해당 토큰의 타입), alg(해싱 알고리즘)
Payload: 토큰에 담을 정보(유저 정보, 권한 부여 여부, 기타 정보)
Signature: Header와 Payload의 Base64 인코딩 값을 시크릿 키와 함께 다시 한번 해싱한 후 인코딩한 값 가짐

------------------------------------------ JWT 란? ------------------------------------------------

flask_jwt_extended 모듈: Flask 기반 웹 애플리케이션에서 JWT(JSON Web Token) 인증을 구현하기 위한 확장 기능 제공
-> 토큰 생성, 토큰 유효성 검사, 토큰에 저장된 사용자 식별 정보 얻기 등

1. JWTManager 설정 및 토큰 생성: Flask 애플리케이션에 JWT 관련 설정을 추가하는 역할

app.config['JWT_SERCCRET_KEY'] = 'MY-SECRET-KEY' # JWT 암호화에 사용할 키 설정

jwt = JWTManager(app)

access_token = create_access_token(identity=USER_NUM) # 토큰 생성

생성 된 토큰을 API 호출 시 헤더에서 Authorization에 토큰을 넣어 호출

--------------------------------------- 토큰 생성 단계 --------------------------------------------

2. 토큰 인증 및 식별 정보 얻기

@jwt_required 데코레이터는 해당 엔드포인트 토큰 인증이 필요하다는 것을 나타냄

get_jwt_identity() 함수를 사용하여 토큰에 저장된 사용자 식별 정보를 얻을 수 있음

current_user = get_jwt_identity()

토큰 인증 절차
- 클라이언트가 서버에 아이디/ 비밀번호를 담아 로그인 요청을 보냄
- 일치하는지 확인하고, 클라이언트에게 보낼 암호화 토큰 생성
- 토큰을 클라이언트에게 보내주고 토큰을 저장
- 클라이언트가 HTTP 헤더(authorization 헤더)에 토큰을 담아 보냄
- 서버는 토큰을 해독하여 "아 우리가 발급해준 토큰이 맞네!" 라는 판단이 될 경우,
클라이언트의 요청을 처리한 후 응답을 보내줌 

--------------------------------------- 토큰 인증 단계 --------------------------------------------

사용자 인증하려면 클라이언트 애플리케이션 HTTP 요청의 승인 헤더에 있는 JSON 웹 토큰(JWT)을 백엔드 API로 전송
API 게이트웨이가 사용자의 API 대신 토큰을 검증, 선택한 인증 방법을 지원하도록 게이트웨이에 대해 API 구성 설정

Headers key-value
"Authorization" : "Bearer {{access_token}}"


