로그인/ 회원가입 서비스를 제공할 때 사용자 개인정보를 보호하기 위해 중요한 정보는 암호화해서 내부 DB에 저장할 필요가 있다.
해당 암호화와 관련된 개념은 해싱

https://thalals.tistory.com/166

[회원가입]
1. 회원정보를 받아온다
2. 회원정보 비밀번호를 해시함수로 암호화해서 데이터베이스에 저장한다.

[로그인]
1. 사용자 아이디, 비밀번호를 받아온다
2. 사용자 비밀번호를 똑같이 해시함수 값으로 암호화 
(암호화한 값이 저장되어 있기 때문)
3. id, 암호화된 pw로 db내에 해당 유저를 찾는다
4. 해당 유저를 찾으면 JWT 토큰을 만들어 발급한다.
(JWT 토큰 안에는 ID, 토큰만료시간 등)
5. JWT 토큰을 암호화 한 다음 브라우저로 보낸다
6. 브라우저에서 JWT토큰 값을 성공적으로 받았으면, 브라우저 쿠키에 이 토큰값을 저장
(쿠키 값은 항상 브라우저에서 서버에 무언가 요청을 보낼 때 같이 보내짐)
7. 이 쿠키값이 유지되는 동안, 회원이 브라우저에 API를 요청할 때마다 회원임을 확인 받음
8. 로그아웃 시 해당 토큰을 삭제

example.
Python hashlib - 문자열 해싱 라이브러리
hashlib: 파이썬 라이브러리 제공 hash 함수
방식 설정: hashlib.md5, sha256
digest, hexdigest - 해싱코드 문자열 리턴
문자열을 해싱시켰다면 digest or hexdigest 함수를 사용해 해싱된 문자열 얻음

