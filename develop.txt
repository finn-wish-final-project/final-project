1. 백엔드 구현
- 백엔드 프레임워크를 선택하여 웹 서버 구축
- 회원가입과 로그인을 처리하는 API 엔드포인트 구현
- 회원가입 API 엔드포인트는 사용자가 제출한 정보를 받아 DB에 저장
- 로그인 API 엔드포인트는 사용자가 제출한 로그인 정보를 검증하고, 
  로그인 성공 시 세션 또는 토큰을 생성하여 클라이언트에게 전달 

# API 엔드포인트 구현, 로그인 성공 시 토큰 생성, 전달

2. 프론트엔드 구현
- HTML, CSS 및 JavaScript를 사용하여 회원가입 및 로그인 페이지 구현
- 회원가입 페이지는 사용자가 필요한 정보를 입력하고 제출할 수 있는 폼을 제공
- 로그인 페이지는 사용자가 로그인 정보를 입력하고 제출할 수 있는 폼을 제공
- 폼 데이터를 서버로 전송하기 위해 AJAX 또는 Fetch API를 사용

3. 데이터베이스 연동
- 백엔드에서 선택한 데이터베이스 시스템과 연결하여 회원 정보를 저장하고 조회
- 사용자 정보를 저장하기 위해 테이블 또는 컬렉션을 생성하고 필요한 필드를 정의
- 회원가입 시 입력받은 정보를 데이터베이스에 저장, 로그인 시 해당 정보를 검증

# 회원가입 - 입력 정보 저장, 로그인 - 정보 검증

4. 보안 
- 비밀번호를 안전하게 저장하기 위해 해시 알고리즘(ex.bcrypt)을 사용
- 로그인 정보를 전송하는 과정에서 HTTPS를 사용하여 데이터 암호화
- 필요한 경우 캡차(CAPTCHA) 또는 다른 보안 기술 도입하여 악성 공격 방지

# 해시 알고리즘(bcrypt), HTTPS 사용

5. 세션 또는 토큰 기반 인증
- 로그인 성공 시 세션 또는 토큰을 생성하여 사용자 인증 상태 유지
- 세션 기반 인증은 백엔드 서버 측에서 세션 관리, 클라이언트에 세션 식별자 전달
- 토큰 기반 인증은 JWT(Json Web Token)를 사용하여 클라이언트에 토큰 발급하고 인증 유지
- 토큰은 사용자 정보와 추가적인 데이터를 포함, 서버에서 토큰의 유효성을 검증하여 인증 수행

# JWT를 사용하여 토근 기반 인증

6. 에러 처리
- 회원가입 및 로그인 과정에서 발생할 수 있는 에러 처리
- ex. 중복 이메일 주소로 회원가입 시도하거나 잘못된 로그인 정보를 입력할 경우 에러 메시지 반환

# 에러 처리

7. 유효성 검사 
- 회원가입 폼과 로그인 폼에서 입력된 데이터의 유효성을 검사
- 필수 필드가 비어있지 않은지, 이메일 형식이 올바른지, 비밀번호가 일치하는지 등 확인
- 클라이언트 측에서도 유효성 검사를 수행, 백엔드에서도 추가적인 검사 수행하여 데이터 일관성과 안전성 유지

# 유효성 검사 - 비밀번호 일치, 값이 다 입력 되었는지, 형식이 올바른지

8. 추가 기능
- 비밀번호 재설정, 이메일 확인 등 추가 기능 구현 가능
- 이메일 확인을 위해 이메일 링크 보내고, 사용자가 확인하면 계정을 활성화하는 기능 등 구현 가능
- 비밀번호 재설정을 위해 임시 비밀번호 생성하고, 사용자가 이를 사용하여 새 비밀번호를 설정하는 등 기능 구현 가능
